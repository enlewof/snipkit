{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"SnipKit Execute the scripts saved in your favorite snippet manager without even leaving the terminal. Retrieve snippets from a list of external snippet managers, so you can keep your scripts all at one place and manage them more easily: Search for snippets by typing. Execute them with parameters. Define default values or a list of pre-defined values to pick from. Customize SnipKit with a theme to match the look of your terminal. Getting started","title":"Home"},{"location":"#snipkit","text":"","title":"SnipKit"},{"location":"#execute-the-scripts-saved-in-your-favorite-snippet-manager-without-even-leaving-the-terminal","text":"Retrieve snippets from a list of external snippet managers, so you can keep your scripts all at one place and manage them more easily: Search for snippets by typing. Execute them with parameters. Define default values or a list of pre-defined values to pick from. Customize SnipKit with a theme to match the look of your terminal. Getting started","title":"Execute the scripts saved in your favorite snippet manager without even leaving the terminal."},{"location":"configuration/overview/","text":"Configuration Snipkit requires a configuration file to be present. The configuration file resides in the snipkit home directory. Home directory The path to the home directory is assumed to be {$XDG_CONFIG_HOME}/snipkit . The value of XDG_CONFIG_HOME is specified by the XDG Base Directory Specification . If not set explicitly, a sensible default value for your operating system is assumed: macOS : ~/Library/Application Support/snipkit Linux : ~/.config/snipkit You can specify another directory to be used by SnipKit be setting the environment variable SNIPKIT_HOME . E.g., you may want to put the following into your ~/.zshrc file: export SNIPKIT_HOME = ~/.snipkit Initialization In order to create a config file for SnipKit, execute: snipkit config init This command creates a config file in the SnipKit home directory. The initial config file looks similar to this: version : 1.0.0 config : style : # The theme defines the terminal colors used by Snipkit. # Available themes:default,dracula. theme : default # Your preferred editor to open the config file when typing 'snipkit config edit'. editor : \"\" # Defaults to a reasonable value for your operation system when empty. # The command which should run if you don't provide any subcommand. defaultRootCommand : \"\" # If not set, the help text will be shown. No snippet manager has been added at this time. In order to add a one execute: snipkit manager add For more information on the different managers supported, please see Managers . Config options Editor When typing snipkit config edit the configuration file will be opened in an editor of your choice. The default editor is defined by the $VISUAL or $EDITOR environment variables. This behavior can be overwritten by setting the editor field in the configuration file to a non-empty string, e.g.: version : 1.0.0 config : editor : \"code\" If no value is provided at all, SnipKit will try to use vim . Shell The shell for script executions is defined by the $SHELL environment variable. This behavior can be overwritten by setting the shell option to a non-empty string, e.g.: version : 1.0.0 config : shell : \"/bin/zsh\" If neither $SHELL nor the config option shell is defined, SnipKit will try to use /bin/bash as a fallback value. Theme SnipKit supports multiple themes out of the box and also allows you to define your own themes: version : 1.0.0 config : theme : \"default\" If the theme is not shipped with snipkit, it will try to look up a custom theme. If the theme is named <xx> , the theme file must be located at <SNIPKIT_HOME>/<xxx>.yaml . For a list of supported default themes, have a look at the Themes page. Default Root Command Most of the time, you want to call the same subcommand, e.g. print or exec . You can configure snipkit so that this command gets executed by default: version : 1.0.0 config : defaultRootCommand : \"exec\" This way, calling snipkit will yield the same result as snipkit exec . If you want to call the print command instead, you can still call snipkit print . Clean up The config file as well as all custom themes can be deleted with: snipkit config clean The cleanup method is a way to remove all SnipKit artifacts from your hard drive. It only deletes contents of the SnipKit home directory. If this directory is empty at the end of the cleanup process, it will be deleted as well.","title":"Overview"},{"location":"configuration/overview/#configuration","text":"Snipkit requires a configuration file to be present. The configuration file resides in the snipkit home directory.","title":"Configuration"},{"location":"configuration/overview/#home-directory","text":"The path to the home directory is assumed to be {$XDG_CONFIG_HOME}/snipkit . The value of XDG_CONFIG_HOME is specified by the XDG Base Directory Specification . If not set explicitly, a sensible default value for your operating system is assumed: macOS : ~/Library/Application Support/snipkit Linux : ~/.config/snipkit You can specify another directory to be used by SnipKit be setting the environment variable SNIPKIT_HOME . E.g., you may want to put the following into your ~/.zshrc file: export SNIPKIT_HOME = ~/.snipkit","title":"Home directory"},{"location":"configuration/overview/#initialization","text":"In order to create a config file for SnipKit, execute: snipkit config init This command creates a config file in the SnipKit home directory. The initial config file looks similar to this: version : 1.0.0 config : style : # The theme defines the terminal colors used by Snipkit. # Available themes:default,dracula. theme : default # Your preferred editor to open the config file when typing 'snipkit config edit'. editor : \"\" # Defaults to a reasonable value for your operation system when empty. # The command which should run if you don't provide any subcommand. defaultRootCommand : \"\" # If not set, the help text will be shown. No snippet manager has been added at this time. In order to add a one execute: snipkit manager add For more information on the different managers supported, please see Managers .","title":"Initialization"},{"location":"configuration/overview/#config-options","text":"","title":"Config options"},{"location":"configuration/overview/#editor","text":"When typing snipkit config edit the configuration file will be opened in an editor of your choice. The default editor is defined by the $VISUAL or $EDITOR environment variables. This behavior can be overwritten by setting the editor field in the configuration file to a non-empty string, e.g.: version : 1.0.0 config : editor : \"code\" If no value is provided at all, SnipKit will try to use vim .","title":"Editor"},{"location":"configuration/overview/#shell","text":"The shell for script executions is defined by the $SHELL environment variable. This behavior can be overwritten by setting the shell option to a non-empty string, e.g.: version : 1.0.0 config : shell : \"/bin/zsh\" If neither $SHELL nor the config option shell is defined, SnipKit will try to use /bin/bash as a fallback value.","title":"Shell"},{"location":"configuration/overview/#theme","text":"SnipKit supports multiple themes out of the box and also allows you to define your own themes: version : 1.0.0 config : theme : \"default\" If the theme is not shipped with snipkit, it will try to look up a custom theme. If the theme is named <xx> , the theme file must be located at <SNIPKIT_HOME>/<xxx>.yaml . For a list of supported default themes, have a look at the Themes page.","title":"Theme"},{"location":"configuration/overview/#default-root-command","text":"Most of the time, you want to call the same subcommand, e.g. print or exec . You can configure snipkit so that this command gets executed by default: version : 1.0.0 config : defaultRootCommand : \"exec\" This way, calling snipkit will yield the same result as snipkit exec . If you want to call the print command instead, you can still call snipkit print .","title":"Default Root Command"},{"location":"configuration/overview/#clean-up","text":"The config file as well as all custom themes can be deleted with: snipkit config clean The cleanup method is a way to remove all SnipKit artifacts from your hard drive. It only deletes contents of the SnipKit home directory. If this directory is empty at the end of the cleanup process, it will be deleted as well.","title":"Clean up"},{"location":"configuration/themes/","text":"Themes SnipKit supports built-in themes as well as the possibility to define your own custom themes. In order to pick a different theme, edit the configuration : config.yaml version : 1.0.0 config : style : theme : simple Themes may have different variants for light & dark backgrounds, depending on your terminal. Enforce light or dark theme Sometimes SnipKit is not able to detect if you're using a light or dark background correctly. You can force a specific theme variant by explicitly defining the .light or .dark suffix, e.g., default.light or default.dark as theme name in your config.yaml . Built-in themes As of now, the following themes are supported: Default Theme Dark Light Simple Theme Custom themes Custom themes should be placed in the directory <snipkit_home>/themes/ , <snikit_home> referring to the directory where your configuration lives. A theme called custom-theme should be put into a file named custom-theme.yaml . The contents are as follows: custom-theme.yaml version : 1.0.0 variables : white : \"#FFFFFF\" black : \"#000000\" red : \"#ED6A5A\" green : \"#44AF69\" yellow : \"#FCAB10\" brown : \"#3A3335\" gray : \"#8A8A8A\" lightGray : \"#DDDADA\" theme : borderColor : ${gray} borderTitleColor : ${gray} previewColorSchemeName : \"pastie\" textColor : \"\" # if empty the default terminal foreground color will be used subduedColor : ${gray} subduedContrastColor : ${black} verySubduedColor : ${lightGray} verySubduedContrastColor : ${black} activeColor : ${red} # activeContrastColor : ${white} titleColor : ${brown} titleContrastColor : ${white} highlightColor : ${green} highlightContrastColor : ${black} infoColor : ${yellow} infoContrastColor : ${white} snippetColor : ${lightGray} snippetContrastColor : ${black} Example themes You can have a look at the built-in themes for some examples. Dark & Light themes You can define themes differently for light & dark terminal backgrounds. Just add the suffix .light.yaml respectively .dark.yaml to the filename (e.g., example-theme.light.yaml ). SnipKit will pick the appropriate theme automatically. Variables The usage of variables in the theme is optional. Variables help you to reuse the same color and, thus, make the theme more readable. If you don't want to use a variable, just specify the color directly, e.g.: titleColor : \"#FF0000\" Supported colors You can either use the hex value or an ANSI code to specify a color, e.g.: #c0c0c0 or 7 for a light-gray color. Implementation detail The underlying library used for the colors is termenv . The Readme gives a good overview of available ANSI colors.","title":"Themes"},{"location":"configuration/themes/#themes","text":"SnipKit supports built-in themes as well as the possibility to define your own custom themes. In order to pick a different theme, edit the configuration : config.yaml version : 1.0.0 config : style : theme : simple Themes may have different variants for light & dark backgrounds, depending on your terminal. Enforce light or dark theme Sometimes SnipKit is not able to detect if you're using a light or dark background correctly. You can force a specific theme variant by explicitly defining the .light or .dark suffix, e.g., default.light or default.dark as theme name in your config.yaml .","title":"Themes"},{"location":"configuration/themes/#built-in-themes","text":"As of now, the following themes are supported:","title":"Built-in themes"},{"location":"configuration/themes/#default-theme","text":"","title":"Default Theme"},{"location":"configuration/themes/#dark","text":"","title":"Dark"},{"location":"configuration/themes/#light","text":"","title":"Light"},{"location":"configuration/themes/#simple-theme","text":"","title":"Simple Theme"},{"location":"configuration/themes/#custom-themes","text":"Custom themes should be placed in the directory <snipkit_home>/themes/ , <snikit_home> referring to the directory where your configuration lives. A theme called custom-theme should be put into a file named custom-theme.yaml . The contents are as follows: custom-theme.yaml version : 1.0.0 variables : white : \"#FFFFFF\" black : \"#000000\" red : \"#ED6A5A\" green : \"#44AF69\" yellow : \"#FCAB10\" brown : \"#3A3335\" gray : \"#8A8A8A\" lightGray : \"#DDDADA\" theme : borderColor : ${gray} borderTitleColor : ${gray} previewColorSchemeName : \"pastie\" textColor : \"\" # if empty the default terminal foreground color will be used subduedColor : ${gray} subduedContrastColor : ${black} verySubduedColor : ${lightGray} verySubduedContrastColor : ${black} activeColor : ${red} # activeContrastColor : ${white} titleColor : ${brown} titleContrastColor : ${white} highlightColor : ${green} highlightContrastColor : ${black} infoColor : ${yellow} infoContrastColor : ${white} snippetColor : ${lightGray} snippetContrastColor : ${black} Example themes You can have a look at the built-in themes for some examples. Dark & Light themes You can define themes differently for light & dark terminal backgrounds. Just add the suffix .light.yaml respectively .dark.yaml to the filename (e.g., example-theme.light.yaml ). SnipKit will pick the appropriate theme automatically.","title":"Custom themes"},{"location":"configuration/themes/#variables","text":"The usage of variables in the theme is optional. Variables help you to reuse the same color and, thus, make the theme more readable. If you don't want to use a variable, just specify the color directly, e.g.: titleColor : \"#FF0000\"","title":"Variables"},{"location":"configuration/themes/#supported-colors","text":"You can either use the hex value or an ANSI code to specify a color, e.g.: #c0c0c0 or 7 for a light-gray color. Implementation detail The underlying library used for the colors is termenv . The Readme gives a good overview of available ANSI colors.","title":"Supported colors"},{"location":"getting-started/overview/","text":"Overview Usage $ snipkit -h Snipkit helps you to execute scripts saved in your favorite snippets manager without even leaving the terminal. Usage: snipkit [ flags ] snipkit [ command ] Available Commands: browse Browse all snippets without executing them completion Generate the autocompletion script for the specified shell config Manage your snipkit configuration file exec Execute a snippet directly from the terminal help Help about any command info Provides useful information about the snipkit configuration manager Manage the snippet managers snipkit connects to print Prints the snippet on stdout Flags: -c, --config string config file ( default \"/Users/pse/Library/Application Support/snipkit/config.yaml\" ) -h, --help help for snipkit -l, --log-level string log level used for debugging problems ( supported values: trace,debug,info,warn,error,fatal,panic ) ( default \"panic\" ) -v, --version version for snipkit Use \"snipkit [command] --help\" for more information about a command. Init a config file Upon first usage, you have to create a config file. Create a new config file snipkit config init Edit the config file manually SnipKit has a lot more configuration options. Please see Configuration if you encounter problems or want to modify the behavior. As of now, no external snippet manager is configured. Add an external snippet manager snipkit manager add You will be presented with a list of supported managers. Pick the one you want to use. After that, you should be ready to go. Different manager need different configuration Every manager has unique configuration options. Have a look at Managers for more information. Snippet Commands Print a snippet snipkit print Just browse the available snippets without doing anything snipkit browse Execute a snippet snipkit exec","title":"Overview"},{"location":"getting-started/overview/#overview","text":"","title":"Overview"},{"location":"getting-started/overview/#usage","text":"$ snipkit -h Snipkit helps you to execute scripts saved in your favorite snippets manager without even leaving the terminal. Usage: snipkit [ flags ] snipkit [ command ] Available Commands: browse Browse all snippets without executing them completion Generate the autocompletion script for the specified shell config Manage your snipkit configuration file exec Execute a snippet directly from the terminal help Help about any command info Provides useful information about the snipkit configuration manager Manage the snippet managers snipkit connects to print Prints the snippet on stdout Flags: -c, --config string config file ( default \"/Users/pse/Library/Application Support/snipkit/config.yaml\" ) -h, --help help for snipkit -l, --log-level string log level used for debugging problems ( supported values: trace,debug,info,warn,error,fatal,panic ) ( default \"panic\" ) -v, --version version for snipkit Use \"snipkit [command] --help\" for more information about a command.","title":"Usage"},{"location":"getting-started/overview/#init-a-config-file","text":"Upon first usage, you have to create a config file. Create a new config file snipkit config init Edit the config file manually SnipKit has a lot more configuration options. Please see Configuration if you encounter problems or want to modify the behavior. As of now, no external snippet manager is configured. Add an external snippet manager snipkit manager add You will be presented with a list of supported managers. Pick the one you want to use. After that, you should be ready to go. Different manager need different configuration Every manager has unique configuration options. Have a look at Managers for more information.","title":"Init a config file"},{"location":"getting-started/overview/#snippet-commands","text":"Print a snippet snipkit print Just browse the available snippets without doing anything snipkit browse Execute a snippet snipkit exec","title":"Snippet Commands"},{"location":"getting-started/parameters/","text":"Parameters In order to support snippet parameters, SnipKit requires some special parameter syntax in your scripts. Info The good thing about the parameter syntax used by SnipKit is that your scripts remain fully functional even when not executed via SnipKit. All parameter information is described by the usage of comments and, thus, can be regarded as a consistent way to document your scripts. Parameter Names & Descriptions Example snippet 1 2 3 4 # some comment # ${VAR1} Name: First Output # ${VAR1} Description: What to print on the terminal first echo \" ${ VAR1 } \" Each comment which corresponds to a variable starts with # ${<varName>} with <varName> referring to the variable name used in your script (e.g., VAR1 in the example). Line 1 is ignored by SnipKit since it does not adhere to this pattern. Line 2 defines the name of the parameter as displayed by SnipKit when presenting you parameter input form. Line 3 describes the usage of the parameter. As of now, the description will be used as a placeholder value for an empty parameter input field. Line 4 uses the parameter. It does not correspond to the parameter syntax and belongs to your script. Note If you don't specify a parameter name, the name of the variable will be used instead, e.g., VAR1 in the example. Default Values You can define a default value for each parameter: Example snippet 1 2 3 # some comment # ${VAR1} Default: Hello World! echo \" ${ VAR1 } \" This way, the input field for parameter VAR1 will be automatically filled with Hello World . Pre-defined values You can add multiple pre-defined values for a parameter in order to ease filling the input form: Example snippet 1 2 3 4 # some comment # ${VAR1} Values: One + some more, \"Two\",Three, , # ${VAR1} Values: Four\\, and some more, Five echo \" ${ VAR1 } \" The example defines the values One + some more , \"Two\" , Three , Four, and some more , and Five . Empty pre-defined values will be omitted. You can define multiple lines starting with ${<varname>} Values: to list pre-defined values. The listed values will be joined by SnipKit. Each value must be seperated by the next via the character , . Attention If the value contains a comma itself, it needs to be escaped via \\, .","title":"Parameters"},{"location":"getting-started/parameters/#parameters","text":"In order to support snippet parameters, SnipKit requires some special parameter syntax in your scripts. Info The good thing about the parameter syntax used by SnipKit is that your scripts remain fully functional even when not executed via SnipKit. All parameter information is described by the usage of comments and, thus, can be regarded as a consistent way to document your scripts.","title":"Parameters"},{"location":"getting-started/parameters/#parameter-names-descriptions","text":"Example snippet 1 2 3 4 # some comment # ${VAR1} Name: First Output # ${VAR1} Description: What to print on the terminal first echo \" ${ VAR1 } \" Each comment which corresponds to a variable starts with # ${<varName>} with <varName> referring to the variable name used in your script (e.g., VAR1 in the example). Line 1 is ignored by SnipKit since it does not adhere to this pattern. Line 2 defines the name of the parameter as displayed by SnipKit when presenting you parameter input form. Line 3 describes the usage of the parameter. As of now, the description will be used as a placeholder value for an empty parameter input field. Line 4 uses the parameter. It does not correspond to the parameter syntax and belongs to your script. Note If you don't specify a parameter name, the name of the variable will be used instead, e.g., VAR1 in the example.","title":"Parameter Names &amp; Descriptions"},{"location":"getting-started/parameters/#default-values","text":"You can define a default value for each parameter: Example snippet 1 2 3 # some comment # ${VAR1} Default: Hello World! echo \" ${ VAR1 } \" This way, the input field for parameter VAR1 will be automatically filled with Hello World .","title":"Default Values"},{"location":"getting-started/parameters/#pre-defined-values","text":"You can add multiple pre-defined values for a parameter in order to ease filling the input form: Example snippet 1 2 3 4 # some comment # ${VAR1} Values: One + some more, \"Two\",Three, , # ${VAR1} Values: Four\\, and some more, Five echo \" ${ VAR1 } \" The example defines the values One + some more , \"Two\" , Three , Four, and some more , and Five . Empty pre-defined values will be omitted. You can define multiple lines starting with ${<varname>} Values: to list pre-defined values. The listed values will be joined by SnipKit. Each value must be seperated by the next via the character , . Attention If the value contains a comma itself, it needs to be escaped via \\, .","title":"Pre-defined values"},{"location":"getting-started/power-setup/","text":"Power setup Alias Always typing the full name snipkit in order to open the manager might be too cumbersome for you. Instead, define an alias (e.g. in your .zshrc file): # SnipKit alais sn () { snipkit $1 } Then you can just type sn instead of snipkit to open SnipKit. Default Root Command Most of the time, you want to call the same subcommand, e.g. print or exec . You can configure snipkit so that this command gets executed by default by editing the config: Example: # snipkit config edit defaultRootCommand : \"exec\" With this setup, calling sn will yield the same result as snipkit exec . If you want to call the print command instead, type sn print .","title":"Power Setup"},{"location":"getting-started/power-setup/#power-setup","text":"","title":"Power setup"},{"location":"getting-started/power-setup/#alias","text":"Always typing the full name snipkit in order to open the manager might be too cumbersome for you. Instead, define an alias (e.g. in your .zshrc file): # SnipKit alais sn () { snipkit $1 } Then you can just type sn instead of snipkit to open SnipKit.","title":"Alias"},{"location":"getting-started/power-setup/#default-root-command","text":"Most of the time, you want to call the same subcommand, e.g. print or exec . You can configure snipkit so that this command gets executed by default by editing the config: Example: # snipkit config edit defaultRootCommand : \"exec\" With this setup, calling sn will yield the same result as snipkit exec . If you want to call the print command instead, type sn print .","title":"Default Root Command"},{"location":"managers/fslibrary/","text":"File System Library Available for: macOS, Linux The file system library manager lets you provide snippets via multiple local directories. Each directory contains files which correspond to snippets. Configuration The configuration for the file system library may look similar to this: config.yaml manager : fsLibrary : # If set to false, the files specified via libraryPath will not be provided to you. enabled : true # Paths directories that hold snippets files. Each file must hold one snippet only. libraryPath : - /path/to/file/system/library - /another/path # Only files with endings which match one of the listed suffixes will be considered. suffixRegex : - .sh # If set to true, the files will not be parsed in advance. This means, only the filename can be used as the snippet name. lazyOpen : false # If set to true, the title comment will not be shown in the preview window. hideTitleInPreview : true Snippet Names By default, the file name will be used as the snippet name. E.g., snippet /another/path/count-character.sh will be presented to you as count-character.sh in the lookup window. However, SnipKit lets you also provide a different snippet name via a special comment syntax: # # <custom snippet name> # The start of this comment must be within the first 3 lines of the file. If the first of three consecutive lines starting with # is after line 3, the snippet name will be ignored. E.g., a valid snippet named Do something instead of example.sh may look like this: example.sh 1 2 3 4 5 6 7 #!/bin/bash # # Do something # echo \"here we go...\" Open snippets lazily This only works if lazyOpen is set to false since the snippet files must be parsed in advance before presenting the lookup window. If set to true , only the filename can be used as snippet name. Hide the title comment If you don't want to show the title header in the snippet preview window, set hideTitleInPreview: true . SnipKit will remove the title header.","title":"File System Library"},{"location":"managers/fslibrary/#file-system-library","text":"Available for: macOS, Linux The file system library manager lets you provide snippets via multiple local directories. Each directory contains files which correspond to snippets.","title":"File System Library"},{"location":"managers/fslibrary/#configuration","text":"The configuration for the file system library may look similar to this: config.yaml manager : fsLibrary : # If set to false, the files specified via libraryPath will not be provided to you. enabled : true # Paths directories that hold snippets files. Each file must hold one snippet only. libraryPath : - /path/to/file/system/library - /another/path # Only files with endings which match one of the listed suffixes will be considered. suffixRegex : - .sh # If set to true, the files will not be parsed in advance. This means, only the filename can be used as the snippet name. lazyOpen : false # If set to true, the title comment will not be shown in the preview window. hideTitleInPreview : true","title":"Configuration"},{"location":"managers/fslibrary/#snippet-names","text":"By default, the file name will be used as the snippet name. E.g., snippet /another/path/count-character.sh will be presented to you as count-character.sh in the lookup window. However, SnipKit lets you also provide a different snippet name via a special comment syntax: # # <custom snippet name> # The start of this comment must be within the first 3 lines of the file. If the first of three consecutive lines starting with # is after line 3, the snippet name will be ignored. E.g., a valid snippet named Do something instead of example.sh may look like this: example.sh 1 2 3 4 5 6 7 #!/bin/bash # # Do something # echo \"here we go...\" Open snippets lazily This only works if lazyOpen is set to false since the snippet files must be parsed in advance before presenting the lookup window. If set to true , only the filename can be used as snippet name. Hide the title comment If you don't want to show the title header in the snippet preview window, set hideTitleInPreview: true . SnipKit will remove the title header.","title":"Snippet Names"},{"location":"managers/githubgist/","text":"GitHub Gist Available for: macOS, Linux The GitHub Gist manager lets you provide snippets via multiple GitHub accounts. Each gist may contain multiple files which are mapped to single snippets. The gists are cached locally and synchronized manually, so accessing them is very fast. Example Gist Upon adding the GitHub Gist manager via snipkit manager add , SnipKit will configure a working example gist , so you can quickly see how it works. Configuration The configuration for the GitHub Gist manager may look similar to this: config.yaml manager : githubGist : # If set to false, github gist is disabled completely. enabled : true # You can define multiple independent GitHub Gist sources. gists : - # If set to false, this GitHub gist url is ignored. enabled : true # URL to the GitHub gist account. url : gist.github.com/lemoony # Supported values: None, OAuthDeviceFlow, PAT. Default value: None (which means no authentication). In order to retrieve secret gists, you must be authenticated. authenticationMethod : OAuthDeviceFlow # If this list is not empty, only those gists that match the listed tags will be provided to you. includeTags : [ snipkitExample ] # Only gist files with endings which match one of the listed suffixes will be considered. suffixRegex : [ .sh ] # Defines where the snippet name is extracted from (see also titleHeaderEnabled). Allowed values: DESCRIPTION, FILENAME, COMBINE, COMBINE_PREFER_DESCRIPTION. nameMode : COMBINE_PREFER_DESCRIPTION # If set to true, any tags will be removed from the description. removeTagsFromDescription : true # If set to true, the snippet title can be overwritten by defining a title header within the gist. titleHeaderEnabled : true # If set to true, the title header comment will not be shown in the preview window. hideTitleInPreview : true Synchronization All gists are cached locally. If there are updates, you have to manually trigger a synchronization process via snipkit manager sync There is also a shorthand alias: snipkit sync Authentication If authenticationMethod is set to None , only public gists are available. In order to retrieve secret gists, use one of the following values: PAT OAuthDeviceFlow Value PAT refers to a personalized access token , which has to be created manually. OAuthDeviceFlow refers to the OAuth Device Flow supported by GitHub. In both cases, the scope of the token is limited to gist . After specifying the desired authentication mechanism, just trigger a synchronization via snipkit sync . Snipkit will ask you for the PAT or perform the OAuth authorization. The access token will be stored securely (e.g., by means of Keychain on macOS). PAT vs OAuth If you want to use a PAT or OAuth. Both mechanisms have different advantages. With a personalized access token, you have full control over the expiration date, but you have to create the token yourself. The OAuth mechanism is more convenient since you don't have to create a token yourself. However, the token may expire sooner and you have to perform the authentication process more often. Custom OAuth Client ID One option which is not listed by default, since it won't be required very often, is the following: config.yaml manager : githubGist : OAuthClientID : <client_id> The OAuthClientID lets you specify a custom client ID when performing the OAuth authentication. This is only required if your gists are not hosted on github.com and you want to use OAuthDeviceFlow . Snippet Names The name of a snippet can be retrieved by multiple ways. Set config option nameMode to one of the following values: DESCRIPTION : The description of the gist will be used as name. If a gist contains multiple files, all snippets will have the same name. FILENAME : The filename of the gist will be used as name. COMBINE : The description and the filename of the gist will be concatenated ( <description> - <filename> ). COMBINE_PREFER_DESCRIPTION : The description of the gist will be used as name. If a gist contains multiple files, the description and the filename of the gist will be concatenated. Comment Syntax SnipKit lets you also provide a different snippet name via a special comment syntax. For a more detailed description, please see section Snippet Names in file system directory . In order to enable this feature, set titleHeaderEnabled to true . If a snippet does not contain a title header comment, the specified nameMode will decide the snippet name. Tags The description of a gist may contain multiple tags which can be used for filtering via the includeTags option. E.g., a gist with the description Example gist title #test #snipkit is tagged with test and snipkit . If you have set removeTagsFromDescription to true , only Example gist title will be used as Snippet Name.","title":"GitHub Gist"},{"location":"managers/githubgist/#github-gist","text":"Available for: macOS, Linux The GitHub Gist manager lets you provide snippets via multiple GitHub accounts. Each gist may contain multiple files which are mapped to single snippets. The gists are cached locally and synchronized manually, so accessing them is very fast. Example Gist Upon adding the GitHub Gist manager via snipkit manager add , SnipKit will configure a working example gist , so you can quickly see how it works.","title":"GitHub Gist"},{"location":"managers/githubgist/#configuration","text":"The configuration for the GitHub Gist manager may look similar to this: config.yaml manager : githubGist : # If set to false, github gist is disabled completely. enabled : true # You can define multiple independent GitHub Gist sources. gists : - # If set to false, this GitHub gist url is ignored. enabled : true # URL to the GitHub gist account. url : gist.github.com/lemoony # Supported values: None, OAuthDeviceFlow, PAT. Default value: None (which means no authentication). In order to retrieve secret gists, you must be authenticated. authenticationMethod : OAuthDeviceFlow # If this list is not empty, only those gists that match the listed tags will be provided to you. includeTags : [ snipkitExample ] # Only gist files with endings which match one of the listed suffixes will be considered. suffixRegex : [ .sh ] # Defines where the snippet name is extracted from (see also titleHeaderEnabled). Allowed values: DESCRIPTION, FILENAME, COMBINE, COMBINE_PREFER_DESCRIPTION. nameMode : COMBINE_PREFER_DESCRIPTION # If set to true, any tags will be removed from the description. removeTagsFromDescription : true # If set to true, the snippet title can be overwritten by defining a title header within the gist. titleHeaderEnabled : true # If set to true, the title header comment will not be shown in the preview window. hideTitleInPreview : true","title":"Configuration"},{"location":"managers/githubgist/#synchronization","text":"All gists are cached locally. If there are updates, you have to manually trigger a synchronization process via snipkit manager sync There is also a shorthand alias: snipkit sync","title":"Synchronization"},{"location":"managers/githubgist/#authentication","text":"If authenticationMethod is set to None , only public gists are available. In order to retrieve secret gists, use one of the following values: PAT OAuthDeviceFlow Value PAT refers to a personalized access token , which has to be created manually. OAuthDeviceFlow refers to the OAuth Device Flow supported by GitHub. In both cases, the scope of the token is limited to gist . After specifying the desired authentication mechanism, just trigger a synchronization via snipkit sync . Snipkit will ask you for the PAT or perform the OAuth authorization. The access token will be stored securely (e.g., by means of Keychain on macOS). PAT vs OAuth If you want to use a PAT or OAuth. Both mechanisms have different advantages. With a personalized access token, you have full control over the expiration date, but you have to create the token yourself. The OAuth mechanism is more convenient since you don't have to create a token yourself. However, the token may expire sooner and you have to perform the authentication process more often.","title":"Authentication"},{"location":"managers/githubgist/#custom-oauth-client-id","text":"One option which is not listed by default, since it won't be required very often, is the following: config.yaml manager : githubGist : OAuthClientID : <client_id> The OAuthClientID lets you specify a custom client ID when performing the OAuth authentication. This is only required if your gists are not hosted on github.com and you want to use OAuthDeviceFlow .","title":"Custom OAuth Client ID"},{"location":"managers/githubgist/#snippet-names","text":"The name of a snippet can be retrieved by multiple ways. Set config option nameMode to one of the following values: DESCRIPTION : The description of the gist will be used as name. If a gist contains multiple files, all snippets will have the same name. FILENAME : The filename of the gist will be used as name. COMBINE : The description and the filename of the gist will be concatenated ( <description> - <filename> ). COMBINE_PREFER_DESCRIPTION : The description of the gist will be used as name. If a gist contains multiple files, the description and the filename of the gist will be concatenated. Comment Syntax SnipKit lets you also provide a different snippet name via a special comment syntax. For a more detailed description, please see section Snippet Names in file system directory . In order to enable this feature, set titleHeaderEnabled to true . If a snippet does not contain a title header comment, the specified nameMode will decide the snippet name.","title":"Snippet Names"},{"location":"managers/githubgist/#tags","text":"The description of a gist may contain multiple tags which can be used for filtering via the includeTags option. E.g., a gist with the description Example gist title #test #snipkit is tagged with test and snipkit . If you have set removeTagsFromDescription to true , only Example gist title will be used as Snippet Name.","title":"Tags"},{"location":"managers/overview/","text":"Overview Managers are the actual provider of snippets. Supported managers SnippetsLab Snip Moreover, SnipKit allows you to provide snippets via a simple file system directory . Adding a manager Adding a manager means that SnipKit will retrieve snippets from it each time it is started. This command lets you add a manager to your configuration : snipkit manager add It represents a list of all supported managers that have not been added or enabled in your configuration. It will try to detect the path to the manager and configure everything automatically. If SnipKit thinks it has found the corresponding manager and everything looks good so far, it will be enabled. Otherwise, all required config options will be added to your config file, however, the manager will be disabled. Enabling & Disabling Each manager can be enabled or disabled. By default, all managers are disabled: config.yaml manager : <managerName> : # If set to false, the <managerName> is disabled enabled : true If a manager does not work, SnipKit refuses to startup. In this case, disable the manager by setting enabled: false or fix the configuration.","title":"Overview"},{"location":"managers/overview/#overview","text":"Managers are the actual provider of snippets.","title":"Overview"},{"location":"managers/overview/#supported-managers","text":"SnippetsLab Snip Moreover, SnipKit allows you to provide snippets via a simple file system directory .","title":"Supported managers"},{"location":"managers/overview/#adding-a-manager","text":"Adding a manager means that SnipKit will retrieve snippets from it each time it is started. This command lets you add a manager to your configuration : snipkit manager add It represents a list of all supported managers that have not been added or enabled in your configuration. It will try to detect the path to the manager and configure everything automatically. If SnipKit thinks it has found the corresponding manager and everything looks good so far, it will be enabled. Otherwise, all required config options will be added to your config file, however, the manager will be disabled.","title":"Adding a manager"},{"location":"managers/overview/#enabling-disabling","text":"Each manager can be enabled or disabled. By default, all managers are disabled: config.yaml manager : <managerName> : # If set to false, the <managerName> is disabled enabled : true If a manager does not work, SnipKit refuses to startup. In this case, disable the manager by setting enabled: false or fix the configuration.","title":"Enabling &amp; Disabling"},{"location":"managers/pet/","text":"Pet Available for: macOS, Linux Repository Configuration The configuration for Pet may look similar to this: config.yaml manager : pet : # Set to true if you want to use pet. enabled : true # List of pet snippet files. libraryPaths : - /Users/testuser/.config/pet/snippet.toml # If this list is not empty, only those snippets that match the listed tags will be provided to you. includeTags : - snipkit - othertag Upon adding Pet as a manager, SnipKit will try to detect a default librayPath automatically. If the library file was not found, enabled will be set to false . With this example configuration, SnipKit gets all snippets from Pet which are tagged snipkit or othertag . All other snippets will not be presented to you. If you don't want to filter for tags, set includeTags: [] . Parameter Pet comes with its own parameter syntax in the form of <param> or <param=default_value> . SnipKit supports this syntax and you should have no problems using your Pet snippets the same way in SnipKit. Tip While being easy to use, Pet's parameter syntax is less expressive than the one of SnipKit. Migrate to the file system directory manager if you want to take advantage of the additional SnipKit features like multiple value options or parameter descriptions.","title":"Pet"},{"location":"managers/pet/#pet","text":"Available for: macOS, Linux Repository","title":"Pet"},{"location":"managers/pet/#configuration","text":"The configuration for Pet may look similar to this: config.yaml manager : pet : # Set to true if you want to use pet. enabled : true # List of pet snippet files. libraryPaths : - /Users/testuser/.config/pet/snippet.toml # If this list is not empty, only those snippets that match the listed tags will be provided to you. includeTags : - snipkit - othertag Upon adding Pet as a manager, SnipKit will try to detect a default librayPath automatically. If the library file was not found, enabled will be set to false . With this example configuration, SnipKit gets all snippets from Pet which are tagged snipkit or othertag . All other snippets will not be presented to you. If you don't want to filter for tags, set includeTags: [] .","title":"Configuration"},{"location":"managers/pet/#parameter","text":"Pet comes with its own parameter syntax in the form of <param> or <param=default_value> . SnipKit supports this syntax and you should have no problems using your Pet snippets the same way in SnipKit. Tip While being easy to use, Pet's parameter syntax is less expressive than the one of SnipKit. Migrate to the file system directory manager if you want to take advantage of the additional SnipKit features like multiple value options or parameter descriptions.","title":"Parameter"},{"location":"managers/pictarinesnip/","text":"Snip Available for: macOS Homepage Repository Configuration The configuration for Snip may look similar to this: config.yaml manager : pictarineSnip : # Set to true if you want to use Snip. enabled : true # Path to the snippets file. libraryPath : /Users/<user>/Library/Containers/com.pictarine.Snip/Data/Library/Application Support/Snip/snippets # If this list is not empty, only those snippets that match the listed tags will be provided to you. includeTags : - snipkit - othertag Upon adding Snip as a manager, SnipKit will try to detect the librayPath automatically. If the library file was not found, enabled will be set to false . With this example configuration, SnipKit gets all snippets from Snip which are tagged snipkit or othertag . All other snippets will not be presented to you. If you don't want to filter for tags, set includeTags: [] .","title":"Snip"},{"location":"managers/pictarinesnip/#snip","text":"Available for: macOS Homepage Repository","title":"Snip"},{"location":"managers/pictarinesnip/#configuration","text":"The configuration for Snip may look similar to this: config.yaml manager : pictarineSnip : # Set to true if you want to use Snip. enabled : true # Path to the snippets file. libraryPath : /Users/<user>/Library/Containers/com.pictarine.Snip/Data/Library/Application Support/Snip/snippets # If this list is not empty, only those snippets that match the listed tags will be provided to you. includeTags : - snipkit - othertag Upon adding Snip as a manager, SnipKit will try to detect the librayPath automatically. If the library file was not found, enabled will be set to false . With this example configuration, SnipKit gets all snippets from Snip which are tagged snipkit or othertag . All other snippets will not be presented to you. If you don't want to filter for tags, set includeTags: [] .","title":"Configuration"},{"location":"managers/snippetslab/","text":"SnippetsLab Available for: macOS Homepeage Configuration The configuration for SnippetsLab may look similar to this: config.yaml manager : snippetsLab : # Set to true if you want to use SnippetsLab. enabled : true # Path to your *.snippetslablibrary file. # SnipKit will try to detect this file automatically when generating the config. libraryPath : /path/to/main.snippetslablibrary # If this list is not empty, only those snippets that match the listed tags will be provided to you. includeTags : - snipkit - othertag With this example configuration, SnipKit gets all snippets from SnippetsLab which are tagged with snipkit or othertag . All other snippets will not be presented to you. If you don't want to filter for tags, set includeTags: [] . Library path Snipkit will try to automatically detect the path to the currently configured *.snippetslablibrary file. If you have iCloud sync enabled, the path will be similar to: /Users/<user>/Library/Containers/com.renfei.SnippetsLab/Data/Library/Application Support/com.renfei.SnippetsLab/main.snippetslablibrary SnippetsLab lets you configure a custom library path. In this case, SnipKit will try to detect the preferences file of SnippetsLab: /Users/<user>/Library/Containers/com.renfei.SnippetsLab/Data/Library/Preferences/com.renfei.SnippetsLab.plist The preferences file holds the path to the current *.snippetslablibrary file (if iCloud sync is turned off).","title":"SnippetsLab"},{"location":"managers/snippetslab/#snippetslab","text":"Available for: macOS Homepeage","title":"SnippetsLab"},{"location":"managers/snippetslab/#configuration","text":"The configuration for SnippetsLab may look similar to this: config.yaml manager : snippetsLab : # Set to true if you want to use SnippetsLab. enabled : true # Path to your *.snippetslablibrary file. # SnipKit will try to detect this file automatically when generating the config. libraryPath : /path/to/main.snippetslablibrary # If this list is not empty, only those snippets that match the listed tags will be provided to you. includeTags : - snipkit - othertag With this example configuration, SnipKit gets all snippets from SnippetsLab which are tagged with snipkit or othertag . All other snippets will not be presented to you. If you don't want to filter for tags, set includeTags: [] .","title":"Configuration"},{"location":"managers/snippetslab/#library-path","text":"Snipkit will try to automatically detect the path to the currently configured *.snippetslablibrary file. If you have iCloud sync enabled, the path will be similar to: /Users/<user>/Library/Containers/com.renfei.SnippetsLab/Data/Library/Application Support/com.renfei.SnippetsLab/main.snippetslablibrary SnippetsLab lets you configure a custom library path. In this case, SnipKit will try to detect the preferences file of SnippetsLab: /Users/<user>/Library/Containers/com.renfei.SnippetsLab/Data/Library/Preferences/com.renfei.SnippetsLab.plist The preferences file holds the path to the current *.snippetslablibrary file (if iCloud sync is turned off).","title":"Library path"}]}